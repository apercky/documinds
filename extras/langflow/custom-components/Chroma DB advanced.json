{"data":{"edges":[],"nodes":[{"data":{"node":{"template":{"_type":"Component","embedding":{"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"embedding","value":"","display_name":"Embedding","advanced":false,"input_types":["Embeddings"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"HandleInput"},"ingest_data":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","trace_as_input":true,"required":false,"placeholder":"","show":true,"name":"ingest_data","value":"","display_name":"Ingest Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"","title_case":false,"type":"other","_input_type":"DataInput"},"allow_duplicates":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"allow_duplicates","value":false,"display_name":"Allow Duplicates","advanced":true,"dynamic":false,"info":"If false, will not add documents that are already in the Vector Store.","title_case":false,"type":"bool","_input_type":"BoolInput"},"authentication_type":{"tool_mode":false,"trace_as_metadata":true,"options":["None","Basic Auth"],"options_metadata":[],"combobox":false,"dialog_inputs":{},"required":false,"placeholder":"","show":true,"name":"authentication_type","value":"Basic Auth","display_name":"Authentication Type","advanced":false,"dynamic":false,"info":"Select the authentication type for your Chroma server","title_case":false,"type":"str","_input_type":"DropdownInput","load_from_db":false},"chroma_server_cors_allow_origins":{"tool_mode":false,"trace_as_metadata":true,"load_from_db":false,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"chroma_server_cors_allow_origins","value":"","display_name":"Server CORS Allow Origins","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"chroma_server_grpc_port":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"chroma_server_grpc_port","value":"","display_name":"Server gRPC Port","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"chroma_server_host":{"tool_mode":false,"trace_as_metadata":true,"load_from_db":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"chroma_server_host","value":"CHROMADB_HOST","display_name":"Server Host","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"chroma_server_http_port":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"chroma_server_http_port","value":8000,"display_name":"Server HTTP Port","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput","load_from_db":false},"chroma_server_ssl_enabled":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"chroma_server_ssl_enabled","value":false,"display_name":"Server SSL Enabled","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from copy import deepcopy\nimport json\n\nfrom chromadb.config import Settings\nfrom langchain_chroma import Chroma\nfrom typing_extensions import override\n\nfrom langflow.base.vectorstores.model import (\n    LCVectorStoreComponent,\n    check_cached_vector_store,\n)\nfrom langflow.base.vectorstores.utils import chroma_collection_to_data\nfrom langflow.io import BoolInput, DropdownInput, HandleInput, IntInput, StrInput\nfrom langflow.schema import Data\n\n\nclass ChromaVectorStoreAdvancedComponent(LCVectorStoreComponent):\n    \"\"\"Chroma Vector Store with search capabilities and basic authentication.\"\"\"\n\n    display_name: str = \"Chroma DB advanced\"\n    description: str = (\n        \"Chroma Vector Store with search capabilities and authentication options\"\n    )\n    name = \"Chroma DB advanced\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"langflow\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        *LCVectorStoreComponent.inputs,\n        HandleInput(\n            name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]\n        ),\n        DropdownInput(\n            name=\"authentication_type\",\n            display_name=\"Authentication Type\",\n            options=[\"None\", \"Basic Auth\"],\n            value=\"None\",\n            info=\"Select the authentication type for your Chroma server\",\n        ),\n        StrInput(\n            name=\"username\",\n            display_name=\"Username\",\n            info=\"Username for basic authentication\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"password\",\n            display_name=\"Password\",\n            info=\"Password for basic authentication\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n        BoolInput(\n            name=\"preserve_complex_metadata\",\n            display_name=\"Preserve Complex Metadata\",\n            advanced=True,\n            info=\"If true, complex metadata will be serialized as JSON strings rather than filtered out.\",\n            value=True,\n        ),\n    ]\n\n    @override\n    @check_cached_vector_store\n    def build_vector_store(self) -> Chroma:\n        \"\"\"Builds the Chroma object.\"\"\"\n        try:\n            from chromadb import Client, HttpClient\n            from langchain_chroma import Chroma\n        except ImportError as e:\n            msg = \"Could not import Chroma integration package. Please install it with `pip install langchain-chroma`.\"\n            raise ImportError(msg) from e\n\n        # Chroma settings and client\n        client = None\n\n        if self.chroma_server_host:\n            # Create settings object\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins\n                or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n\n            # Handle authentication\n            if (\n                self.authentication_type == \"Basic Auth\"\n                and self.username\n                and self.password\n            ):\n                # Create basic auth headers\n                import base64\n\n                auth_string = f\"{self.username}:{self.password}\"\n                encoded_auth = base64.b64encode(auth_string.encode()).decode()\n                auth_headers = {\"Authorization\": f\"Basic {encoded_auth}\"}\n\n                # Use HttpClient with auth headers for basic auth\n                client = HttpClient(\n                    host=self.chroma_server_host,\n                    port=self.chroma_server_http_port,\n                    ssl=self.chroma_server_ssl_enabled,\n                    headers=auth_headers,\n                    settings=chroma_settings,\n                )\n                self.log(\"Using basic authentication for Chroma connection.\")\n            else:\n                # Standard client without auth\n                client = Client(settings=chroma_settings)\n                self.log(\"Using Chroma connection without authentication.\")\n\n        # Check persist_directory and expand it if it is a relative path\n        persist_directory = (\n            self.resolve_path(self.persist_directory)\n            if self.persist_directory is not None\n            else None\n        )\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _process_metadata(self, metadata):\n        \"\"\"Process metadata to handle complex data types.\"\"\"\n        if not self.preserve_complex_metadata:\n            # Standard approach: filter out complex metadata\n            try:\n                from langchain_community.vectorstores.utils import filter_complex_metadata\n                return filter_complex_metadata(metadata)\n            except ImportError:\n                self.log(\"Warning: Could not import filter_complex_metadata. Complex metadata may cause errors.\")\n                return metadata\n        else:\n            # Convert complex types to strings\n            processed_metadata = {}\n            for key, value in metadata.items():\n                if isinstance(value, (str, int, float, bool)):\n                    processed_metadata[key] = value\n                elif value is None:\n                    # Skip None values\n                    continue\n                else:\n                    # Convert complex types to JSON strings\n                    try:\n                        processed_metadata[key] = json.dumps(value)\n                    except (TypeError, ValueError):\n                        # If can't serialize, convert to string\n                        processed_metadata[key] = str(value)\n            return processed_metadata\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"Adds documents to the Vector Store.\"\"\"\n        if not self.ingest_data:\n            self.status = \"\"\n            return\n\n        stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(limit=self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in stored_documents_without_id:\n                    document = _input.to_lc_document()\n                    \n                    # Process metadata if present\n                    if hasattr(document, 'metadata') and document.metadata:\n                        document.metadata = self._process_metadata(document.metadata)\n                    \n                    documents.append(document)\n            else:\n                msg = \"Vector Store Inputs must be Data objects.\"\n                raise TypeError(msg)\n\n        if documents and self.embedding is not None:\n            self.log(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            self.log(\"No documents to add to the Vector Store.\")","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"collection_name":{"tool_mode":false,"trace_as_metadata":true,"load_from_db":false,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"collection_name","value":"rbo","display_name":"Collection Name","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"limit":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"limit","value":10,"display_name":"Limit","advanced":true,"dynamic":false,"info":"Limit the number of records to compare when Allow Duplicates is False.","title_case":false,"type":"int","_input_type":"IntInput","load_from_db":false},"number_of_results":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"number_of_results","value":10,"display_name":"Number of Results","advanced":true,"dynamic":false,"info":"Number of results to return.","title_case":false,"type":"int","_input_type":"IntInput"},"password":{"tool_mode":false,"trace_as_metadata":true,"load_from_db":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"password","value":"CHROMADB_PASSWORD","display_name":"Password","advanced":false,"dynamic":false,"info":"Password for basic authentication","title_case":false,"type":"str","_input_type":"StrInput"},"persist_directory":{"tool_mode":false,"trace_as_metadata":true,"load_from_db":false,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"persist_directory","value":"","display_name":"Persist Directory","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"StrInput"},"preserve_complex_metadata":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"preserve_complex_metadata","value":true,"display_name":"Preserve Complex Metadata","advanced":false,"dynamic":false,"info":"If true, complex metadata will be serialized as JSON strings rather than filtered out.","title_case":false,"type":"bool","_input_type":"BoolInput"},"search_query":{"tool_mode":true,"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"search_query","value":"","display_name":"Search Query","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MultilineInput"},"search_type":{"tool_mode":false,"trace_as_metadata":true,"options":["Similarity","MMR"],"options_metadata":[],"combobox":false,"dialog_inputs":{},"required":false,"placeholder":"","show":true,"name":"search_type","value":"Similarity","display_name":"Search Type","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"DropdownInput"},"should_cache_vector_store":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"should_cache_vector_store","value":true,"display_name":"Cache Vector Store","advanced":true,"dynamic":false,"info":"If True, the vector store will be cached for the current build of the component. This is useful for components that have multiple output methods and want to share the same vector store.","title_case":false,"type":"bool","_input_type":"BoolInput"},"username":{"tool_mode":false,"trace_as_metadata":true,"load_from_db":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"username","value":"CHROMADB_USER","display_name":"Username","advanced":false,"dynamic":false,"info":"Username for basic authentication","title_case":false,"type":"str","_input_type":"StrInput"}},"description":"Chroma Vector Store with search capabilities and authentication options","icon":"Chroma","base_classes":["Data","DataFrame"],"display_name":"Chroma DB advanced","documentation":"","minimized":false,"custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"search_results","hidden":null,"display_name":"Search Results","method":"search_documents","value":"__UNDEFINED__","cache":true,"required_inputs":[],"allows_loop":false,"tool_mode":true},{"types":["DataFrame"],"selected":"DataFrame","name":"dataframe","hidden":null,"display_name":"DataFrame","method":"as_dataframe","value":"__UNDEFINED__","cache":true,"required_inputs":[],"allows_loop":false,"tool_mode":true}],"field_order":["collection_name","persist_directory","ingest_data","search_query","should_cache_vector_store","embedding","authentication_type","username","password","chroma_server_cors_allow_origins","chroma_server_host","chroma_server_http_port","chroma_server_grpc_port","chroma_server_ssl_enabled","allow_duplicates","search_type","number_of_results","limit","preserve_complex_metadata"],"beta":false,"legacy":false,"edited":true,"metadata":{},"tool_mode":false,"lf_version":"1.2.0","official":false},"showNode":true,"type":"Chroma DB advanced","id":"CustomComponent-vG6h1"},"id":"CustomComponent-vG6h1","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"Chroma Vector Store with search capabilities and authentication options","name":"Chroma DB advanced","id":"CustomComponent-vG6h1","is_component":true,"last_tested_version":"1.2.0"}