name: Release

on:
  push:
    branches:
      - main
      - develop

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout con credenziali disabilitate
        uses: actions/checkout@v4
        with:
          persist-credentials: false  # impedisce l'uso del GITHUB_TOKEN di default
          fetch-depth: 0  # 👈 questo è fondamentale! GitHub Actions per default fa il checkout shallow, con --depth=1, e questo tronca la cronologia.

      - name: Skip se commit è 'chore(release):'
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"
          if echo "$COMMIT_MSG" | grep -q "^chore(release):"; then
            echo "🔁 Commit di release automatico, salto job."
            exit 0
          fi
      - name: Setup Git + forzatura remote
        run: |
          git config --global user.name "ci-bot"
          git config --global user.email "ci-bot@apercky.dev"
          git remote set-url origin https://x-access-token:${{ secrets.PAT_GITHUB }}@github.com/apercky/documinds.git

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Estrai versione con semantic-release --dry-run
        id: extract_version
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
        run: |
          VERSION=$(npx semantic-release --dry-run | grep -oP 'The next release version is \K[^\s]+')
          echo "VERSION=$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # ─────────── Nuovi passi per abilitare QEMU + Buildx multi-arch ───────────
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      # ─────────── Fine nuovi passi ───────────

      - name: Build and Push Docker Image
        env:
          GHCR_TOKEN: ${{ secrets.PAT_GITHUB }}  # 👈 usa GHCR_TOKEN come nel Makefile
          DOCUMINDS_DATABASE_URL: "postgresql://fake:fake@localhost:5432/fakedb"  # 👈 valore dummy solo per prisma generate
          VERSION: ${{ env.VERSION }}  # 👈 passa la versione al Makefile
        run: make dist

      - name: Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
        run: npx semantic-release
